#ifndef _GOS_ARDUINO_TEMPLATE_LIBRARY_CRC_H_
#define _GOS_ARDUINO_TEMPLATE_LIBRARY_CRC_H_

#include <Arduino.h>

namespace gos {
namespace atl {
namespace crc {

template<typename C> const C table[] = {
  0x00, 0x00, 0x00, 0x00, 0x1d, 0xb7, 0x10, 0x64,
  0x3b, 0x6e, 0x20, 0xc8, 0x26, 0xd9, 0x30, 0xac,
  0x76, 0xdc, 0x41, 0x90, 0x6b, 0x6b, 0x51, 0xf4,
  0x4d, 0xb2, 0x61, 0x58, 0x50, 0x05, 0x71, 0x3c,
  0xed, 0xb8, 0x83, 0x20, 0xf0, 0x0f, 0x93, 0x44,
  0xd6, 0xd6, 0xa3, 0xe8, 0xcb, 0x61, 0xb3, 0x8c,
  0x9b, 0x64, 0xc2, 0xb0, 0x86, 0xd3, 0xd2, 0xd4,
  0xa0, 0x0a, 0xe2, 0x78, 0xbd, 0xbd, 0xf2, 0x1c
};

template<typename T, typename S = size_t, typename C = uint8_t>
T calculate(const void* vp, const S& count, const C* table = ::gos::atl::crc::table<C>) {
  T crc = ~(T());
  const C* v = static_cast<const C*>(vp);
  const T* ctt = reinterpret_cast<const T*>(table);
  for (S i = 0; i < count; i++) {
    crc = ctt[(crc ^ v[i]) & 0x0f] ^ (crc >> 4);
    crc = ctt[(crc ^ (v[i] >> 4)) & 0x0f] ^ (crc >> 4);
    crc = ~crc;
  }
  return crc;
}

}
}
}

#endif /* _GOS_ARDUINO_TEMPLATE_LIBRARY_CRC_H_ */
